
ATmega32.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000057c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000001a  00800060  0000057c  00000610  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000016  0080007a  0080007a  0000062a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000062a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000065c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000298  00000000  00000000  00000698  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002017  00000000  00000000  00000930  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000d55  00000000  00000000  00002947  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000014ca  00000000  00000000  0000369c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000007d4  00000000  00000000  00004b68  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000fd2  00000000  00000000  0000533c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001a80  00000000  00000000  0000630e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000002c8  00000000  00000000  00007d8e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 f9 00 	jmp	0x1f2	; 0x1f2 <__vector_1>
   8:	0c 94 22 01 	jmp	0x244	; 0x244 <__vector_2>
   c:	0c 94 4b 01 	jmp	0x296	; 0x296 <__vector_3>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 41 02 	jmp	0x482	; 0x482 <__vector_6>
  1c:	0c 94 ef 01 	jmp	0x3de	; 0x3de <__vector_7>
  20:	0c 94 18 02 	jmp	0x430	; 0x430 <__vector_8>
  24:	0c 94 c6 01 	jmp	0x38c	; 0x38c <__vector_9>
  28:	0c 94 9d 01 	jmp	0x33a	; 0x33a <__vector_10>
  2c:	0c 94 74 01 	jmp	0x2e8	; 0x2e8 <__vector_11>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 6a 02 	jmp	0x4d4	; 0x4d4 <__vector_13>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 93 02 	jmp	0x526	; 0x526 <__vector_15>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ec e7       	ldi	r30, 0x7C	; 124
  68:	f5 e0       	ldi	r31, 0x05	; 5
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	aa 37       	cpi	r26, 0x7A	; 122
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	aa e7       	ldi	r26, 0x7A	; 122
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a0 39       	cpi	r26, 0x90	; 144
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 73 00 	call	0xe6	; 0xe6 <main>
  8a:	0c 94 bc 02 	jmp	0x578	; 0x578 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <DC_Motor_Init>:
 */ 

#include "DC_MOTOR.h"

Std_ReturnType DC_Motor_Init(const ST_dcMotor_t* _motor)
{
  92:	cf 93       	push	r28
  94:	df 93       	push	r29
	Std_ReturnType ret = E_OK;
	if(_motor == NULL){
  96:	00 97       	sbiw	r24, 0x00	; 0
  98:	81 f0       	breq	.+32     	; 0xba <DC_Motor_Init+0x28>
  9a:	ec 01       	movw	r28, r24
		ret = E_NOT_OK;
	}
	else
	{
		ret = gpio_pin_dirction_init(&(_motor->pin[0]));
  9c:	0e 94 80 00 	call	0x100	; 0x100 <gpio_pin_dirction_init>
		ret = gpio_write_logic(&(_motor->pin[0]),GPIO_LOW);
  a0:	60 e0       	ldi	r22, 0x00	; 0
  a2:	ce 01       	movw	r24, r28
  a4:	0e 94 ba 00 	call	0x174	; 0x174 <gpio_write_logic>
		ret = gpio_pin_dirction_init(&(_motor->pin[1]));
  a8:	24 96       	adiw	r28, 0x04	; 4
  aa:	ce 01       	movw	r24, r28
  ac:	0e 94 80 00 	call	0x100	; 0x100 <gpio_pin_dirction_init>
		ret = gpio_write_logic(&(_motor->pin[1]),GPIO_LOW);
  b0:	60 e0       	ldi	r22, 0x00	; 0
  b2:	ce 01       	movw	r24, r28
  b4:	0e 94 ba 00 	call	0x174	; 0x174 <gpio_write_logic>
  b8:	01 c0       	rjmp	.+2      	; 0xbc <DC_Motor_Init+0x2a>

Std_ReturnType DC_Motor_Init(const ST_dcMotor_t* _motor)
{
	Std_ReturnType ret = E_OK;
	if(_motor == NULL){
		ret = E_NOT_OK;
  ba:	80 e0       	ldi	r24, 0x00	; 0
		ret = gpio_write_logic(&(_motor->pin[0]),GPIO_LOW);
		ret = gpio_pin_dirction_init(&(_motor->pin[1]));
		ret = gpio_write_logic(&(_motor->pin[1]),GPIO_LOW);
	}
	return ret;
}
  bc:	df 91       	pop	r29
  be:	cf 91       	pop	r28
  c0:	08 95       	ret

000000c2 <DC_Motor_Move_Right>:


Std_ReturnType DC_Motor_Move_Right(const ST_dcMotor_t* _motor)
{
  c2:	cf 93       	push	r28
  c4:	df 93       	push	r29
	Std_ReturnType ret =E_OK;
	if(_motor == NULL){
  c6:	00 97       	sbiw	r24, 0x00	; 0
  c8:	51 f0       	breq	.+20     	; 0xde <DC_Motor_Move_Right+0x1c>
  ca:	ec 01       	movw	r28, r24
		ret = E_NOT_OK;
	}
	else{
		ret = gpio_write_logic(&(_motor->pin[0]),GPIO_LOW);
  cc:	60 e0       	ldi	r22, 0x00	; 0
  ce:	0e 94 ba 00 	call	0x174	; 0x174 <gpio_write_logic>
		ret = gpio_write_logic(&(_motor->pin[1]),GPIO_HIGH);
  d2:	61 e0       	ldi	r22, 0x01	; 1
  d4:	ce 01       	movw	r24, r28
  d6:	04 96       	adiw	r24, 0x04	; 4
  d8:	0e 94 ba 00 	call	0x174	; 0x174 <gpio_write_logic>
  dc:	01 c0       	rjmp	.+2      	; 0xe0 <DC_Motor_Move_Right+0x1e>

Std_ReturnType DC_Motor_Move_Right(const ST_dcMotor_t* _motor)
{
	Std_ReturnType ret =E_OK;
	if(_motor == NULL){
		ret = E_NOT_OK;
  de:	80 e0       	ldi	r24, 0x00	; 0
	else{
		ret = gpio_write_logic(&(_motor->pin[0]),GPIO_LOW);
		ret = gpio_write_logic(&(_motor->pin[1]),GPIO_HIGH);
	}
	return ret;
}
  e0:	df 91       	pop	r29
  e2:	cf 91       	pop	r28
  e4:	08 95       	ret

000000e6 <main>:
	.pin[1].pin_logic = GPIO_LOW,
};

int main(void)
{
	ret = DC_Motor_Init(&motor_1)
  e6:	80 e6       	ldi	r24, 0x60	; 96
  e8:	90 e0       	ldi	r25, 0x00	; 0
  ea:	0e 94 49 00 	call	0x92	; 0x92 <DC_Motor_Init>
  ee:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <ret>
;	
	while (1)
	{
		ret = DC_Motor_Move_Right(&motor_1);
  f2:	80 e6       	ldi	r24, 0x60	; 96
  f4:	90 e0       	ldi	r25, 0x00	; 0
  f6:	0e 94 61 00 	call	0xc2	; 0xc2 <DC_Motor_Move_Right>
  fa:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <ret>
  fe:	f9 cf       	rjmp	.-14     	; 0xf2 <main+0xc>

00000100 <gpio_pin_dirction_init>:
	else
	{
		*dirction = READ_BIT(*pin_regster[pinObject->port], pinObject->pin);
	}
	return ret;
}
 100:	fc 01       	movw	r30, r24
 102:	89 2b       	or	r24, r25
 104:	99 f1       	breq	.+102    	; 0x16c <gpio_pin_dirction_init+0x6c>
 106:	82 81       	ldd	r24, Z+2	; 0x02
 108:	88 23       	and	r24, r24
 10a:	19 f0       	breq	.+6      	; 0x112 <gpio_pin_dirction_init+0x12>
 10c:	81 30       	cpi	r24, 0x01	; 1
 10e:	b9 f0       	breq	.+46     	; 0x13e <gpio_pin_dirction_init+0x3e>
 110:	2f c0       	rjmp	.+94     	; 0x170 <gpio_pin_dirction_init+0x70>
 112:	a0 81       	ld	r26, Z
 114:	b0 e0       	ldi	r27, 0x00	; 0
 116:	aa 0f       	add	r26, r26
 118:	bb 1f       	adc	r27, r27
 11a:	af 58       	subi	r26, 0x8F	; 143
 11c:	bf 4f       	sbci	r27, 0xFF	; 255
 11e:	0d 90       	ld	r0, X+
 120:	bc 91       	ld	r27, X
 122:	a0 2d       	mov	r26, r0
 124:	2c 91       	ld	r18, X
 126:	81 e0       	ldi	r24, 0x01	; 1
 128:	90 e0       	ldi	r25, 0x00	; 0
 12a:	01 80       	ldd	r0, Z+1	; 0x01
 12c:	02 c0       	rjmp	.+4      	; 0x132 <gpio_pin_dirction_init+0x32>
 12e:	88 0f       	add	r24, r24
 130:	99 1f       	adc	r25, r25
 132:	0a 94       	dec	r0
 134:	e2 f7       	brpl	.-8      	; 0x12e <gpio_pin_dirction_init+0x2e>
 136:	82 2b       	or	r24, r18
 138:	8c 93       	st	X, r24
 13a:	81 e0       	ldi	r24, 0x01	; 1
 13c:	08 95       	ret
 13e:	a0 81       	ld	r26, Z
 140:	b0 e0       	ldi	r27, 0x00	; 0
 142:	aa 0f       	add	r26, r26
 144:	bb 1f       	adc	r27, r27
 146:	af 58       	subi	r26, 0x8F	; 143
 148:	bf 4f       	sbci	r27, 0xFF	; 255
 14a:	0d 90       	ld	r0, X+
 14c:	bc 91       	ld	r27, X
 14e:	a0 2d       	mov	r26, r0
 150:	2c 91       	ld	r18, X
 152:	81 e0       	ldi	r24, 0x01	; 1
 154:	90 e0       	ldi	r25, 0x00	; 0
 156:	01 80       	ldd	r0, Z+1	; 0x01
 158:	02 c0       	rjmp	.+4      	; 0x15e <gpio_pin_dirction_init+0x5e>
 15a:	88 0f       	add	r24, r24
 15c:	99 1f       	adc	r25, r25
 15e:	0a 94       	dec	r0
 160:	e2 f7       	brpl	.-8      	; 0x15a <gpio_pin_dirction_init+0x5a>
 162:	80 95       	com	r24
 164:	82 23       	and	r24, r18
 166:	8c 93       	st	X, r24
 168:	81 e0       	ldi	r24, 0x01	; 1
 16a:	08 95       	ret
 16c:	80 e0       	ldi	r24, 0x00	; 0
 16e:	08 95       	ret
 170:	80 e0       	ldi	r24, 0x00	; 0
 172:	08 95       	ret

00000174 <gpio_write_logic>:


Std_ReturnType gpio_write_logic(const ST_pinCofig_t* pinObject, EN_logic_t logic)
{
	Std_ReturnType ret = E_OK;
	if(pinObject == NULL)
 174:	00 97       	sbiw	r24, 0x00	; 0
 176:	c9 f1       	breq	.+114    	; 0x1ea <gpio_write_logic+0x76>
	{
		ret = E_NOT_OK;
	}
	else
	{
		switch(logic)
 178:	66 23       	and	r22, r22
 17a:	e1 f0       	breq	.+56     	; 0x1b4 <gpio_write_logic+0x40>
 17c:	61 30       	cpi	r22, 0x01	; 1
 17e:	b9 f5       	brne	.+110    	; 0x1ee <gpio_write_logic+0x7a>
		{
			case GPIO_HIGH :
				SET_BIT(*(port_regster[pinObject->port]), pinObject->pin);
 180:	dc 01       	movw	r26, r24
 182:	ec 91       	ld	r30, X
 184:	f0 e0       	ldi	r31, 0x00	; 0
 186:	ee 0f       	add	r30, r30
 188:	ff 1f       	adc	r31, r31
 18a:	e7 59       	subi	r30, 0x97	; 151
 18c:	ff 4f       	sbci	r31, 0xFF	; 255
 18e:	01 90       	ld	r0, Z+
 190:	f0 81       	ld	r31, Z
 192:	e0 2d       	mov	r30, r0
 194:	40 81       	ld	r20, Z
 196:	21 e0       	ldi	r18, 0x01	; 1
 198:	30 e0       	ldi	r19, 0x00	; 0
 19a:	b9 01       	movw	r22, r18
 19c:	11 96       	adiw	r26, 0x01	; 1
 19e:	0c 90       	ld	r0, X
 1a0:	02 c0       	rjmp	.+4      	; 0x1a6 <gpio_write_logic+0x32>
 1a2:	66 0f       	add	r22, r22
 1a4:	77 1f       	adc	r23, r23
 1a6:	0a 94       	dec	r0
 1a8:	e2 f7       	brpl	.-8      	; 0x1a2 <gpio_write_logic+0x2e>
 1aa:	cb 01       	movw	r24, r22
 1ac:	84 2b       	or	r24, r20
 1ae:	80 83       	st	Z, r24
}


Std_ReturnType gpio_write_logic(const ST_pinCofig_t* pinObject, EN_logic_t logic)
{
	Std_ReturnType ret = E_OK;
 1b0:	81 e0       	ldi	r24, 0x01	; 1
	{
		switch(logic)
		{
			case GPIO_HIGH :
				SET_BIT(*(port_regster[pinObject->port]), pinObject->pin);
				break;
 1b2:	08 95       	ret
				
			case GPIO_LOW :
				CLEAR_BIT(*(port_regster[pinObject->port]), pinObject->pin);
 1b4:	dc 01       	movw	r26, r24
 1b6:	ec 91       	ld	r30, X
 1b8:	f0 e0       	ldi	r31, 0x00	; 0
 1ba:	ee 0f       	add	r30, r30
 1bc:	ff 1f       	adc	r31, r31
 1be:	e7 59       	subi	r30, 0x97	; 151
 1c0:	ff 4f       	sbci	r31, 0xFF	; 255
 1c2:	01 90       	ld	r0, Z+
 1c4:	f0 81       	ld	r31, Z
 1c6:	e0 2d       	mov	r30, r0
 1c8:	40 81       	ld	r20, Z
 1ca:	21 e0       	ldi	r18, 0x01	; 1
 1cc:	30 e0       	ldi	r19, 0x00	; 0
 1ce:	b9 01       	movw	r22, r18
 1d0:	11 96       	adiw	r26, 0x01	; 1
 1d2:	0c 90       	ld	r0, X
 1d4:	02 c0       	rjmp	.+4      	; 0x1da <gpio_write_logic+0x66>
 1d6:	66 0f       	add	r22, r22
 1d8:	77 1f       	adc	r23, r23
 1da:	0a 94       	dec	r0
 1dc:	e2 f7       	brpl	.-8      	; 0x1d6 <gpio_write_logic+0x62>
 1de:	cb 01       	movw	r24, r22
 1e0:	80 95       	com	r24
 1e2:	84 23       	and	r24, r20
 1e4:	80 83       	st	Z, r24
}


Std_ReturnType gpio_write_logic(const ST_pinCofig_t* pinObject, EN_logic_t logic)
{
	Std_ReturnType ret = E_OK;
 1e6:	81 e0       	ldi	r24, 0x01	; 1
				SET_BIT(*(port_regster[pinObject->port]), pinObject->pin);
				break;
				
			case GPIO_LOW :
				CLEAR_BIT(*(port_regster[pinObject->port]), pinObject->pin);
				break;
 1e8:	08 95       	ret
Std_ReturnType gpio_write_logic(const ST_pinCofig_t* pinObject, EN_logic_t logic)
{
	Std_ReturnType ret = E_OK;
	if(pinObject == NULL)
	{
		ret = E_NOT_OK;
 1ea:	80 e0       	ldi	r24, 0x00	; 0
 1ec:	08 95       	ret
			case GPIO_LOW :
				CLEAR_BIT(*(port_regster[pinObject->port]), pinObject->pin);
				break;
				
			default :
				ret = E_NOT_OK;
 1ee:	80 e0       	ldi	r24, 0x00	; 0
		}
	}
	return ret;
}
 1f0:	08 95       	ret

000001f2 <__vector_1>:
	}
}


ISR(INT0_vect)
{
 1f2:	1f 92       	push	r1
 1f4:	0f 92       	push	r0
 1f6:	0f b6       	in	r0, 0x3f	; 63
 1f8:	0f 92       	push	r0
 1fa:	11 24       	eor	r1, r1
 1fc:	2f 93       	push	r18
 1fe:	3f 93       	push	r19
 200:	4f 93       	push	r20
 202:	5f 93       	push	r21
 204:	6f 93       	push	r22
 206:	7f 93       	push	r23
 208:	8f 93       	push	r24
 20a:	9f 93       	push	r25
 20c:	af 93       	push	r26
 20e:	bf 93       	push	r27
 210:	ef 93       	push	r30
 212:	ff 93       	push	r31
	if(INT0_fptr != NULL)
 214:	e0 91 7e 00 	lds	r30, 0x007E	; 0x80007e <INT0_fptr>
 218:	f0 91 7f 00 	lds	r31, 0x007F	; 0x80007f <INT0_fptr+0x1>
 21c:	30 97       	sbiw	r30, 0x00	; 0
 21e:	09 f0       	breq	.+2      	; 0x222 <__vector_1+0x30>
	{
		INT0_fptr();
 220:	09 95       	icall
	}
}
 222:	ff 91       	pop	r31
 224:	ef 91       	pop	r30
 226:	bf 91       	pop	r27
 228:	af 91       	pop	r26
 22a:	9f 91       	pop	r25
 22c:	8f 91       	pop	r24
 22e:	7f 91       	pop	r23
 230:	6f 91       	pop	r22
 232:	5f 91       	pop	r21
 234:	4f 91       	pop	r20
 236:	3f 91       	pop	r19
 238:	2f 91       	pop	r18
 23a:	0f 90       	pop	r0
 23c:	0f be       	out	0x3f, r0	; 63
 23e:	0f 90       	pop	r0
 240:	1f 90       	pop	r1
 242:	18 95       	reti

00000244 <__vector_2>:


ISR(INT1_vect)
{
 244:	1f 92       	push	r1
 246:	0f 92       	push	r0
 248:	0f b6       	in	r0, 0x3f	; 63
 24a:	0f 92       	push	r0
 24c:	11 24       	eor	r1, r1
 24e:	2f 93       	push	r18
 250:	3f 93       	push	r19
 252:	4f 93       	push	r20
 254:	5f 93       	push	r21
 256:	6f 93       	push	r22
 258:	7f 93       	push	r23
 25a:	8f 93       	push	r24
 25c:	9f 93       	push	r25
 25e:	af 93       	push	r26
 260:	bf 93       	push	r27
 262:	ef 93       	push	r30
 264:	ff 93       	push	r31
	if(INT1_fptr != NULL)
 266:	e0 91 7c 00 	lds	r30, 0x007C	; 0x80007c <INT1_fptr>
 26a:	f0 91 7d 00 	lds	r31, 0x007D	; 0x80007d <INT1_fptr+0x1>
 26e:	30 97       	sbiw	r30, 0x00	; 0
 270:	09 f0       	breq	.+2      	; 0x274 <__vector_2+0x30>
	{
		INT1_fptr();
 272:	09 95       	icall
	}
}
 274:	ff 91       	pop	r31
 276:	ef 91       	pop	r30
 278:	bf 91       	pop	r27
 27a:	af 91       	pop	r26
 27c:	9f 91       	pop	r25
 27e:	8f 91       	pop	r24
 280:	7f 91       	pop	r23
 282:	6f 91       	pop	r22
 284:	5f 91       	pop	r21
 286:	4f 91       	pop	r20
 288:	3f 91       	pop	r19
 28a:	2f 91       	pop	r18
 28c:	0f 90       	pop	r0
 28e:	0f be       	out	0x3f, r0	; 63
 290:	0f 90       	pop	r0
 292:	1f 90       	pop	r1
 294:	18 95       	reti

00000296 <__vector_3>:


ISR(INT2_vect)
{
 296:	1f 92       	push	r1
 298:	0f 92       	push	r0
 29a:	0f b6       	in	r0, 0x3f	; 63
 29c:	0f 92       	push	r0
 29e:	11 24       	eor	r1, r1
 2a0:	2f 93       	push	r18
 2a2:	3f 93       	push	r19
 2a4:	4f 93       	push	r20
 2a6:	5f 93       	push	r21
 2a8:	6f 93       	push	r22
 2aa:	7f 93       	push	r23
 2ac:	8f 93       	push	r24
 2ae:	9f 93       	push	r25
 2b0:	af 93       	push	r26
 2b2:	bf 93       	push	r27
 2b4:	ef 93       	push	r30
 2b6:	ff 93       	push	r31
	if(INT2_fptr != NULL)
 2b8:	e0 91 7a 00 	lds	r30, 0x007A	; 0x80007a <__data_end>
 2bc:	f0 91 7b 00 	lds	r31, 0x007B	; 0x80007b <__data_end+0x1>
 2c0:	30 97       	sbiw	r30, 0x00	; 0
 2c2:	09 f0       	breq	.+2      	; 0x2c6 <__vector_3+0x30>
	{
		INT2_fptr();
 2c4:	09 95       	icall
	}
 2c6:	ff 91       	pop	r31
 2c8:	ef 91       	pop	r30
 2ca:	bf 91       	pop	r27
 2cc:	af 91       	pop	r26
 2ce:	9f 91       	pop	r25
 2d0:	8f 91       	pop	r24
 2d2:	7f 91       	pop	r23
 2d4:	6f 91       	pop	r22
 2d6:	5f 91       	pop	r21
 2d8:	4f 91       	pop	r20
 2da:	3f 91       	pop	r19
 2dc:	2f 91       	pop	r18
 2de:	0f 90       	pop	r0
 2e0:	0f be       	out	0x3f, r0	; 63
 2e2:	0f 90       	pop	r0
 2e4:	1f 90       	pop	r1
 2e6:	18 95       	reti

000002e8 <__vector_11>:
	return ret;
}


ISR(TIMER0_OVF_vect)
{
 2e8:	1f 92       	push	r1
 2ea:	0f 92       	push	r0
 2ec:	0f b6       	in	r0, 0x3f	; 63
 2ee:	0f 92       	push	r0
 2f0:	11 24       	eor	r1, r1
 2f2:	2f 93       	push	r18
 2f4:	3f 93       	push	r19
 2f6:	4f 93       	push	r20
 2f8:	5f 93       	push	r21
 2fa:	6f 93       	push	r22
 2fc:	7f 93       	push	r23
 2fe:	8f 93       	push	r24
 300:	9f 93       	push	r25
 302:	af 93       	push	r26
 304:	bf 93       	push	r27
 306:	ef 93       	push	r30
 308:	ff 93       	push	r31
	if(tmr0_overFlow_interruptHandler != NULL)
 30a:	e0 91 82 00 	lds	r30, 0x0082	; 0x800082 <tmr0_overFlow_interruptHandler>
 30e:	f0 91 83 00 	lds	r31, 0x0083	; 0x800083 <tmr0_overFlow_interruptHandler+0x1>
 312:	30 97       	sbiw	r30, 0x00	; 0
 314:	09 f0       	breq	.+2      	; 0x318 <__vector_11+0x30>
	{
		tmr0_overFlow_interruptHandler();
 316:	09 95       	icall
	}
}
 318:	ff 91       	pop	r31
 31a:	ef 91       	pop	r30
 31c:	bf 91       	pop	r27
 31e:	af 91       	pop	r26
 320:	9f 91       	pop	r25
 322:	8f 91       	pop	r24
 324:	7f 91       	pop	r23
 326:	6f 91       	pop	r22
 328:	5f 91       	pop	r21
 32a:	4f 91       	pop	r20
 32c:	3f 91       	pop	r19
 32e:	2f 91       	pop	r18
 330:	0f 90       	pop	r0
 332:	0f be       	out	0x3f, r0	; 63
 334:	0f 90       	pop	r0
 336:	1f 90       	pop	r1
 338:	18 95       	reti

0000033a <__vector_10>:

ISR(TIMER0_COMP_vect)
{
 33a:	1f 92       	push	r1
 33c:	0f 92       	push	r0
 33e:	0f b6       	in	r0, 0x3f	; 63
 340:	0f 92       	push	r0
 342:	11 24       	eor	r1, r1
 344:	2f 93       	push	r18
 346:	3f 93       	push	r19
 348:	4f 93       	push	r20
 34a:	5f 93       	push	r21
 34c:	6f 93       	push	r22
 34e:	7f 93       	push	r23
 350:	8f 93       	push	r24
 352:	9f 93       	push	r25
 354:	af 93       	push	r26
 356:	bf 93       	push	r27
 358:	ef 93       	push	r30
 35a:	ff 93       	push	r31
	if(tmr0_OC_interruptHandler != NULL)
 35c:	e0 91 80 00 	lds	r30, 0x0080	; 0x800080 <tmr0_OC_interruptHandler>
 360:	f0 91 81 00 	lds	r31, 0x0081	; 0x800081 <tmr0_OC_interruptHandler+0x1>
 364:	30 97       	sbiw	r30, 0x00	; 0
 366:	09 f0       	breq	.+2      	; 0x36a <__vector_10+0x30>
	{
		tmr0_OC_interruptHandler();
 368:	09 95       	icall
	}
}
 36a:	ff 91       	pop	r31
 36c:	ef 91       	pop	r30
 36e:	bf 91       	pop	r27
 370:	af 91       	pop	r26
 372:	9f 91       	pop	r25
 374:	8f 91       	pop	r24
 376:	7f 91       	pop	r23
 378:	6f 91       	pop	r22
 37a:	5f 91       	pop	r21
 37c:	4f 91       	pop	r20
 37e:	3f 91       	pop	r19
 380:	2f 91       	pop	r18
 382:	0f 90       	pop	r0
 384:	0f be       	out	0x3f, r0	; 63
 386:	0f 90       	pop	r0
 388:	1f 90       	pop	r1
 38a:	18 95       	reti

0000038c <__vector_9>:
	
}


ISR(TIMER1_OVF_vect)
{
 38c:	1f 92       	push	r1
 38e:	0f 92       	push	r0
 390:	0f b6       	in	r0, 0x3f	; 63
 392:	0f 92       	push	r0
 394:	11 24       	eor	r1, r1
 396:	2f 93       	push	r18
 398:	3f 93       	push	r19
 39a:	4f 93       	push	r20
 39c:	5f 93       	push	r21
 39e:	6f 93       	push	r22
 3a0:	7f 93       	push	r23
 3a2:	8f 93       	push	r24
 3a4:	9f 93       	push	r25
 3a6:	af 93       	push	r26
 3a8:	bf 93       	push	r27
 3aa:	ef 93       	push	r30
 3ac:	ff 93       	push	r31
	if(TMR1_InterriptOveFlow)
 3ae:	e0 91 8a 00 	lds	r30, 0x008A	; 0x80008a <TMR1_InterriptOveFlow>
 3b2:	f0 91 8b 00 	lds	r31, 0x008B	; 0x80008b <TMR1_InterriptOveFlow+0x1>
 3b6:	30 97       	sbiw	r30, 0x00	; 0
 3b8:	09 f0       	breq	.+2      	; 0x3bc <__vector_9+0x30>
	TMR1_InterriptOveFlow();
 3ba:	09 95       	icall
}
 3bc:	ff 91       	pop	r31
 3be:	ef 91       	pop	r30
 3c0:	bf 91       	pop	r27
 3c2:	af 91       	pop	r26
 3c4:	9f 91       	pop	r25
 3c6:	8f 91       	pop	r24
 3c8:	7f 91       	pop	r23
 3ca:	6f 91       	pop	r22
 3cc:	5f 91       	pop	r21
 3ce:	4f 91       	pop	r20
 3d0:	3f 91       	pop	r19
 3d2:	2f 91       	pop	r18
 3d4:	0f 90       	pop	r0
 3d6:	0f be       	out	0x3f, r0	; 63
 3d8:	0f 90       	pop	r0
 3da:	1f 90       	pop	r1
 3dc:	18 95       	reti

000003de <__vector_7>:


ISR(TIMER1_COMPA_vect)
{
 3de:	1f 92       	push	r1
 3e0:	0f 92       	push	r0
 3e2:	0f b6       	in	r0, 0x3f	; 63
 3e4:	0f 92       	push	r0
 3e6:	11 24       	eor	r1, r1
 3e8:	2f 93       	push	r18
 3ea:	3f 93       	push	r19
 3ec:	4f 93       	push	r20
 3ee:	5f 93       	push	r21
 3f0:	6f 93       	push	r22
 3f2:	7f 93       	push	r23
 3f4:	8f 93       	push	r24
 3f6:	9f 93       	push	r25
 3f8:	af 93       	push	r26
 3fa:	bf 93       	push	r27
 3fc:	ef 93       	push	r30
 3fe:	ff 93       	push	r31
	if(TMR1_InterriptComA)
 400:	e0 91 88 00 	lds	r30, 0x0088	; 0x800088 <TMR1_InterriptComA>
 404:	f0 91 89 00 	lds	r31, 0x0089	; 0x800089 <TMR1_InterriptComA+0x1>
 408:	30 97       	sbiw	r30, 0x00	; 0
 40a:	09 f0       	breq	.+2      	; 0x40e <__LOCK_REGION_LENGTH__+0xe>
	TMR1_InterriptComA();
 40c:	09 95       	icall
}
 40e:	ff 91       	pop	r31
 410:	ef 91       	pop	r30
 412:	bf 91       	pop	r27
 414:	af 91       	pop	r26
 416:	9f 91       	pop	r25
 418:	8f 91       	pop	r24
 41a:	7f 91       	pop	r23
 41c:	6f 91       	pop	r22
 41e:	5f 91       	pop	r21
 420:	4f 91       	pop	r20
 422:	3f 91       	pop	r19
 424:	2f 91       	pop	r18
 426:	0f 90       	pop	r0
 428:	0f be       	out	0x3f, r0	; 63
 42a:	0f 90       	pop	r0
 42c:	1f 90       	pop	r1
 42e:	18 95       	reti

00000430 <__vector_8>:


ISR(TIMER1_COMPB_vect)
{
 430:	1f 92       	push	r1
 432:	0f 92       	push	r0
 434:	0f b6       	in	r0, 0x3f	; 63
 436:	0f 92       	push	r0
 438:	11 24       	eor	r1, r1
 43a:	2f 93       	push	r18
 43c:	3f 93       	push	r19
 43e:	4f 93       	push	r20
 440:	5f 93       	push	r21
 442:	6f 93       	push	r22
 444:	7f 93       	push	r23
 446:	8f 93       	push	r24
 448:	9f 93       	push	r25
 44a:	af 93       	push	r26
 44c:	bf 93       	push	r27
 44e:	ef 93       	push	r30
 450:	ff 93       	push	r31
	if(TMR1_InterriptComB)
 452:	e0 91 86 00 	lds	r30, 0x0086	; 0x800086 <TMR1_InterriptComB>
 456:	f0 91 87 00 	lds	r31, 0x0087	; 0x800087 <TMR1_InterriptComB+0x1>
 45a:	30 97       	sbiw	r30, 0x00	; 0
 45c:	09 f0       	breq	.+2      	; 0x460 <__vector_8+0x30>
	TMR1_InterriptComB();
 45e:	09 95       	icall
}
 460:	ff 91       	pop	r31
 462:	ef 91       	pop	r30
 464:	bf 91       	pop	r27
 466:	af 91       	pop	r26
 468:	9f 91       	pop	r25
 46a:	8f 91       	pop	r24
 46c:	7f 91       	pop	r23
 46e:	6f 91       	pop	r22
 470:	5f 91       	pop	r21
 472:	4f 91       	pop	r20
 474:	3f 91       	pop	r19
 476:	2f 91       	pop	r18
 478:	0f 90       	pop	r0
 47a:	0f be       	out	0x3f, r0	; 63
 47c:	0f 90       	pop	r0
 47e:	1f 90       	pop	r1
 480:	18 95       	reti

00000482 <__vector_6>:


ISR(TIMER1_CAPT_vect)
{
 482:	1f 92       	push	r1
 484:	0f 92       	push	r0
 486:	0f b6       	in	r0, 0x3f	; 63
 488:	0f 92       	push	r0
 48a:	11 24       	eor	r1, r1
 48c:	2f 93       	push	r18
 48e:	3f 93       	push	r19
 490:	4f 93       	push	r20
 492:	5f 93       	push	r21
 494:	6f 93       	push	r22
 496:	7f 93       	push	r23
 498:	8f 93       	push	r24
 49a:	9f 93       	push	r25
 49c:	af 93       	push	r26
 49e:	bf 93       	push	r27
 4a0:	ef 93       	push	r30
 4a2:	ff 93       	push	r31
	if(TMR1_InterriptCAPT)
 4a4:	e0 91 84 00 	lds	r30, 0x0084	; 0x800084 <TMR1_InterriptCAPT>
 4a8:	f0 91 85 00 	lds	r31, 0x0085	; 0x800085 <TMR1_InterriptCAPT+0x1>
 4ac:	30 97       	sbiw	r30, 0x00	; 0
 4ae:	09 f0       	breq	.+2      	; 0x4b2 <__vector_6+0x30>
	TMR1_InterriptCAPT();
 4b0:	09 95       	icall
}
 4b2:	ff 91       	pop	r31
 4b4:	ef 91       	pop	r30
 4b6:	bf 91       	pop	r27
 4b8:	af 91       	pop	r26
 4ba:	9f 91       	pop	r25
 4bc:	8f 91       	pop	r24
 4be:	7f 91       	pop	r23
 4c0:	6f 91       	pop	r22
 4c2:	5f 91       	pop	r21
 4c4:	4f 91       	pop	r20
 4c6:	3f 91       	pop	r19
 4c8:	2f 91       	pop	r18
 4ca:	0f 90       	pop	r0
 4cc:	0f be       	out	0x3f, r0	; 63
 4ce:	0f 90       	pop	r0
 4d0:	1f 90       	pop	r1
 4d2:	18 95       	reti

000004d4 <__vector_13>:


/***********************************************ISR ************************************************************/

ISR(USART_RXC_vect)
{
 4d4:	1f 92       	push	r1
 4d6:	0f 92       	push	r0
 4d8:	0f b6       	in	r0, 0x3f	; 63
 4da:	0f 92       	push	r0
 4dc:	11 24       	eor	r1, r1
 4de:	2f 93       	push	r18
 4e0:	3f 93       	push	r19
 4e2:	4f 93       	push	r20
 4e4:	5f 93       	push	r21
 4e6:	6f 93       	push	r22
 4e8:	7f 93       	push	r23
 4ea:	8f 93       	push	r24
 4ec:	9f 93       	push	r25
 4ee:	af 93       	push	r26
 4f0:	bf 93       	push	r27
 4f2:	ef 93       	push	r30
 4f4:	ff 93       	push	r31
	if (UART_RX_Fptr!=NULL)
 4f6:	e0 91 8e 00 	lds	r30, 0x008E	; 0x80008e <UART_RX_Fptr>
 4fa:	f0 91 8f 00 	lds	r31, 0x008F	; 0x80008f <UART_RX_Fptr+0x1>
 4fe:	30 97       	sbiw	r30, 0x00	; 0
 500:	09 f0       	breq	.+2      	; 0x504 <__vector_13+0x30>
	{
		UART_RX_Fptr();
 502:	09 95       	icall
	}
}
 504:	ff 91       	pop	r31
 506:	ef 91       	pop	r30
 508:	bf 91       	pop	r27
 50a:	af 91       	pop	r26
 50c:	9f 91       	pop	r25
 50e:	8f 91       	pop	r24
 510:	7f 91       	pop	r23
 512:	6f 91       	pop	r22
 514:	5f 91       	pop	r21
 516:	4f 91       	pop	r20
 518:	3f 91       	pop	r19
 51a:	2f 91       	pop	r18
 51c:	0f 90       	pop	r0
 51e:	0f be       	out	0x3f, r0	; 63
 520:	0f 90       	pop	r0
 522:	1f 90       	pop	r1
 524:	18 95       	reti

00000526 <__vector_15>:


 ISR(USART_TXC_vect)
{
 526:	1f 92       	push	r1
 528:	0f 92       	push	r0
 52a:	0f b6       	in	r0, 0x3f	; 63
 52c:	0f 92       	push	r0
 52e:	11 24       	eor	r1, r1
 530:	2f 93       	push	r18
 532:	3f 93       	push	r19
 534:	4f 93       	push	r20
 536:	5f 93       	push	r21
 538:	6f 93       	push	r22
 53a:	7f 93       	push	r23
 53c:	8f 93       	push	r24
 53e:	9f 93       	push	r25
 540:	af 93       	push	r26
 542:	bf 93       	push	r27
 544:	ef 93       	push	r30
 546:	ff 93       	push	r31
	if (UART_TX_Fptr!=NULL)
 548:	e0 91 8c 00 	lds	r30, 0x008C	; 0x80008c <UART_TX_Fptr>
 54c:	f0 91 8d 00 	lds	r31, 0x008D	; 0x80008d <UART_TX_Fptr+0x1>
 550:	30 97       	sbiw	r30, 0x00	; 0
 552:	09 f0       	breq	.+2      	; 0x556 <__vector_15+0x30>
	{
		UART_TX_Fptr();
 554:	09 95       	icall
	}
}
 556:	ff 91       	pop	r31
 558:	ef 91       	pop	r30
 55a:	bf 91       	pop	r27
 55c:	af 91       	pop	r26
 55e:	9f 91       	pop	r25
 560:	8f 91       	pop	r24
 562:	7f 91       	pop	r23
 564:	6f 91       	pop	r22
 566:	5f 91       	pop	r21
 568:	4f 91       	pop	r20
 56a:	3f 91       	pop	r19
 56c:	2f 91       	pop	r18
 56e:	0f 90       	pop	r0
 570:	0f be       	out	0x3f, r0	; 63
 572:	0f 90       	pop	r0
 574:	1f 90       	pop	r1
 576:	18 95       	reti

00000578 <_exit>:
 578:	f8 94       	cli

0000057a <__stop_program>:
 57a:	ff cf       	rjmp	.-2      	; 0x57a <__stop_program>
